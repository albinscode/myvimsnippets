snippet index "index"
	<?php

	// A faire avant de charger BLModule...
	$module = "${1:module}";
	$path = "..";

	require_once 'lib/BLModule.php';

	$moduleObject = new BLModule($module, $path);

	$actions[$module] = array(
	    "index" => array (
	        'Url'      => "$path/$module/index.php?action=index",
	        'Right'    => $cright_read,
	        'Condition'=> array ('None'),
	    ),
	);

	$moduleObject->dispatch();

snippet controller "controller"
	<?php
	// Delete useless imports
	require_once 'lib/Model/BLModel.php';
	require_once 'lib/Model/BLModelClient.php';
	require_once 'lib/Model/BLModelInstance.php';
	require_once('lib/Model/BLModelInterlocutor.php');
	require_once 'lib/Model/BLModel${1:module_upper}.php';

	/**
	 * Module $1
	 *
	 */
	class ${2:module_lower}Controller extends BLController
	{
	    /**
	     * Page d'accueil
	     * @return $2Controller
	     */
	    public function indexAction()
	    {

	        // trace
	        if (!isset($_REQUEST['search'])) {
	            $trace = $this->services->get('BLTrace');
	            $trace->setModel(new BLModelTrace);
	            $trace->trace($this->auth->auth, '$2');
	        }

	        // Récupération de l'id client connecté
	        $uid = $this->auth->auth['uid'];
	        $modelClient = new BLModelClient();
	        $modelInterlocutor = new BLModelInterlocutor();
	        $client = $modelClient->getByUserId($uid);
	        $connectedInterlocutor = null;
	        global $civility_list;

	        // Le client est bien connecté
	        if (!empty($client)) {

	            // Récupération des formations du client
	            $$2Model = new BLModel$1();

	            $connectedInterlocutor = $modelInterlocutor->getByUserId($uid);

	            // Récupération des variables déjà postées
	            $variableNames = array('var1', 'var2');
	            $previousVariables = $this->getSubmittedVariables($_POST, $variableNames);

	        }

	        // Formattage des erreurs
	        $errorMsg = $this->getErrorsMessage();


	        $this->view->setTitle("Berger-Levrault - Vos $2s");
	        $this->view->displayIndex($errorMsg, $this->errors, $connectedInterlocutor, $previousVariables);


	        $this->view->show();

	        return $this;
	    }
	}

snippet view "view"

	<?php

	class ${1:module_lower}View extends BLView
	{

		/**
		 * @param $errorMsg currrent error message if any.
		 * @param $errors current list of errors if any.
		 * @param $connectedInterlocutor the current connected interlocutor.
		 * @param $previousVariables the previous posted variables.
		 */
		public function displayIndex($errorMsg, $errors, $connectedInterlocutor, $previousVariables)
		{
			// Récupération des constantes
			$this->display->add_block_file("content", "REQUEST_INDEX", "$1/index.tpl");

			$this->display->set_current_block("MAIN_STYLESHHET");
			$this->display->parseCurrentBlock();

			$this->display->addCSS('style.css');
			$this->display->addCSS('$1.css');
			$this->display->addCSS('../components/errors/errors.css');
			// TODO activate if needed
			// $this->display->addCSS('jquery-ui.min.css');
			// $this->display->addCSS('jquery-ui.structure.min.css');

			$this->display->addJS('/javascript/jquery-1.10.2.js');
			$this->display->addJS('/javascript/jquery-ui.min.js');
			$this->display->addJS('/$1/$1.js');
			$this->display->addJS('/components/utils/utils.js');
			$this->display->addJS('/components/interlocutorSelect/interlocutorSelect.js');
			$this->display->addJS('/components/errors/errors.js');


			// TODO set variables to template
			$this->display->setVariable('var1', 'var1');

			// TODO set current block to parse
			$this->display->setCurrentBlock('ROW');
			$this->display->parseCurrentBlock();
		}
	}
